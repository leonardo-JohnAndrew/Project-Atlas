/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package com.mycompany.activity;
import java.util.Scanner;
import java.util.*; 
        
/**
 *
 * @author Leonardo,John_Andrew
 */
public class Stacks_FunGame_Capillary {
 // Declaration of Variable
    static int size,numpickA,numpickB;
    static int rs;
    static Random num = new Random();
    public  static void main(String[]args ){
    Scanner in = new Scanner(System.in);
    //// create 2 stacks for Result and List/Choice
    Stack<Integer>Result = new Stack<>();
    Stack<Integer>Choices = new Stack<>();
    seperate();
    ///Input Number of Choice/List
    System.out.print("\nNumber of Choices: ");
    size = in.nextInt();
 
     /// call out the method/function in main function
    seperate();
     /// Invoke  stack and number size inside the method/Function Parameter
    choice(size,Choices);
    // invoke 2 stacks  and size  in parameter
    pick(Result,Choices);
    }
    /// inside parameter we get value of stacks Result and Choice
    public static void pick( Stack<Integer> Result, Stack<Integer> Choices){
        // while the choices is not empty the code block inside the while loop will perform
     while(!Choices.isEmpty()){
      
      do{
          //do loop if the pick number is not choices
       Scanner sc = new Scanner(System.in);
       seperate();
       System.out.print("\n(A)Pick a number: ");
       numpickA = sc.nextInt();
       System.out.print("(B)Pick a number: ");
       numpickB = sc.nextInt();
        } while(!Choices.contains(numpickA&numpickB));
       /// condition compare the 2 pick number using if else    
       
       if(numpickA > numpickB){           
            Choices.remove(Integer.valueOf(numpickB));
             rs = 1 ;
             Result.push(rs);/// add result to stack
             
       }else if (numpickA < numpickB){
          
             Choices.remove(Integer.valueOf(numpickA));
             rs = 2 ;
             Result.push(rs);    
       }else if(numpickA ==  numpickB){
             Choices.remove(Integer.valueOf(numpickA));
             rs = 0 ;
             Result.push(rs);
             Choices.remove(Integer.valueOf(numpickB));
       }
        seperate();
      
        /// after do loop  or compare two number display the available choices/list
        System.out.println("\nAvailable Choice: "+ Choices);
       
       }
     seperate();
        ///after while loop or if list/choice size is empty display the result stack
          System.out.println("\nResult :"+Result );
      }
   public static void choice(int size, Stack<Integer> Choices){
       //adding random numbers  until reach the number size List
       for (int a = 0;a< size;a++){
           Choices.add(num.nextInt(20+size)); // Math Random
       }
      System.out.println("\nPick One Number in This List : "+Choices); // after reaching the size Number List
   }
    public static void seperate(){
        /// seperator 
         for (int a = 0 ; a<=20;a++){
         System.out.print("--");
         }
     }
}
